What happens when you initialize a repository? 
Why do you need to do it?


We use the git init to initialize a new repository 
in the folder we need to save or keep track of files 
in versions. When we initialize a new repository we see 
the following message 


Initialized empty Git repository in D:/Git_Git_Hub_Udacity/Version_Control/.git/


We need it when we want files in this directory 
to be saved and any previous version or future versions 
once commited have to be accessible to us. 

However when we begin the initialization of a 
repository, a commit is not made. We know that 
git waits and only sets a commint when the user
specfies one. Also the versions are stored as meta data
in a .git file that can be seen only when we use 

ls -a comman in the bash prompt. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

So after creating a .git folder using the init function on the command line, out next 
task is to add files that we would like to add a commit on. 
Git allows us to create a intermediate stage called the staging folder/area
here we can add files from our working directory. We still have not added a commit. We 
have just added files that will be saved together. So we can put together all the
files that we think would have to be within a commit together. Seperate files that 
do logically different tasks need to be commited seperately. It is this feature that git
gives us. 

  git config --global user.email "sreevatsan07@gmail.com"
  git config --global user.name "sreevatsan"


How can you use the staging area to make sure you have one commit per logical change?

The staging area holds the files in a meta state before they
can actually be subject to a commit after a logical change. 
So first add the file to the staging area by using the 
git add command followed by the file name. Then use the 
git commit command to create a single commit for this particular 
file per logical change. Then proceed with a seperate file from the 
working directory to repeat the above steps to procees to the 
staging area and subsequently commit the files accordingly. 

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

Lets say we start with a code, and start bulding it piece by piece. 
After each piece we creat a commit. Any update or bug fix warrants a new
commit to keep track of all the changes we make whilst we develop the code. 
Now at any given point if we end up thinking of two ideas, but are not sure which one 
we might end up retaining, its better for us to branch out and create two versions
to play with and eventually work on them separately. Maybe we want to show one version of
the code to some people and a different version for others. This again needs the help of branching.



How do the diagrams help you visualize the branch structure?

Using diagrams is the easiest way around understanding the 
git structure. This allows us to see how each branch proceeds.
The git log, command looks up from the latest commit ID all the 
way back till the commit which has no parent commit. A parent 
commit is the commit right before the the one under evaluation. 
The diagram also helps us visualize, unreachable commits. It also 
helps us see the progress with branches that we have. 





















